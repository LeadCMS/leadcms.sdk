name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18, 20, 22]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Run build
        run: npm run build

      - name: Upload test results
        uses: dorny/test-reporter@v1
        if: (success() || failure()) && matrix.node-version == '20'
        with:
          name: Jest Tests Results
          path: coverage/junit.xml
          reporter: jest-junit
          fail-on-error: true

      - name: Archive coverage artifacts
        if: matrix.node-version == '20'
        uses: actions/upload-artifact@v5
        with:
          name: coverage-report
          path: |
            coverage/
            !coverage/tmp
          retention-days: 30

      - name: Test Summary
        if: matrix.node-version == '20'
        run: |
          echo "## üß™ Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Coverage Report" >> $GITHUB_STEP_SUMMARY
          if [ -f coverage/lcov-report/index.html ]; then
            echo "‚úÖ Coverage report generated successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üìä **Coverage Details:**" >> $GITHUB_STEP_SUMMARY
            if [ -f coverage/lcov.info ]; then
              COVERAGE=$(grep -E "end_of_record" coverage/lcov.info | wc -l)
              echo "- Number of files covered: $COVERAGE" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå Coverage report generation failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Environment" >> $GITHUB_STEP_SUMMARY
          echo "- Node.js: ${{ matrix.node-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY

      - name: Verify CLI executable
        run: |
          chmod +x dist/cli/index.js
          ./dist/cli/index.js --help

      - name: Test package contents
        run: |
          npm pack --dry-run
          echo "Verifying package structure..."

          # Check essential files exist
          test -f dist/lib/cms.js || (echo "‚ùå cms.js missing" && exit 1)
          test -f dist/lib/cms.d.ts || (echo "‚ùå cms.d.ts missing" && exit 1)
          test -f dist/cli/index.js || (echo "‚ùå CLI missing" && exit 1)
          test -d dist/templates || (echo "‚ùå Templates missing" && exit 1)
          test -d dist/scripts || (echo "‚ùå Scripts missing" && exit 1)

          echo "‚úÖ Package structure verified"

      - name: Test CLI commands
        run: |
          echo "Testing CLI commands..."
          node dist/cli/index.js --help > /dev/null
          echo "‚úÖ CLI help works"

      - name: Test Docker template generation
        run: |
          cd /tmp
          mkdir leadcms-test
          cd leadcms-test
          node $GITHUB_WORKSPACE/dist/cli/index.js docker

          # Verify Docker files were created
          test -f Dockerfile || (echo "‚ùå Dockerfile not created" && exit 1)
          test -f nginx.conf || (echo "‚ùå nginx.conf not created" && exit 1)
          test -f preview/Dockerfile || (echo "‚ùå Preview Dockerfile not created" && exit 1)
          test -f scripts/inject-runtime-env.sh || (echo "‚ùå Shell script not created" && exit 1)

          echo "‚úÖ Docker templates work correctly"

  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check TypeScript
        run: npx tsc --noEmit

      - name: Verify package.json
        run: |
          echo "Checking package.json structure..."
          node -e "
            const pkg = require('./package.json');
            if (!pkg.bin?.leadcms) throw new Error('Missing bin.leadcms');
            if (!pkg.main) throw new Error('Missing main field');
            if (!pkg.types) throw new Error('Missing types field');
            if (!pkg.files?.includes('dist/')) throw new Error('Missing dist/ in files');
            console.log('‚úÖ package.json structure is valid');
          "

  coverage-comment:
    name: Coverage Comment
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate coverage
        run: npm run test:coverage

      - name: Coverage comment
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info
          delete-old-comments: true
          filter-changed-files: true
